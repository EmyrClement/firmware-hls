-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MatchEngine_1_0_sbkb_rom is 
    generic(
             DWIDTH     : integer := 1; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of MatchEngine_1_0_sbkb_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 3=> "1", 4 to 7=> "0", 8 to 11=> "1", 12 to 15=> "0", 16 to 19=> "1", 20 to 23=> "0", 24 to 27=> "1", 
    28 to 31=> "0", 32 to 35=> "1", 36 to 39=> "0", 40 to 43=> "1", 44 to 47=> "0", 48 to 50=> "1", 51 => "0", 
    52 => "1", 53 to 55=> "0", 56 to 58=> "1", 59 => "0", 60 => "1", 61 to 63=> "0", 64 to 66=> "1", 
    67 => "0", 68 => "1", 69 to 71=> "0", 72 to 74=> "1", 75 => "0", 76 => "1", 77 to 79=> "0", 
    80 to 82=> "1", 83 => "0", 84 => "1", 85 to 87=> "0", 88 to 90=> "1", 91 => "0", 92 => "1", 
    93 to 95=> "0", 96 to 98=> "1", 99 => "0", 100 => "1", 101 to 103=> "0", 104 to 106=> "1", 107 => "0", 
    108 => "1", 109 to 111=> "0", 112 to 113=> "1", 114 to 115=> "0", 116 to 117=> "1", 118 to 119=> "0", 120 to 121=> "1", 
    122 to 123=> "0", 124 to 125=> "1", 126 to 127=> "0", 128 to 129=> "1", 130 to 131=> "0", 132 to 133=> "1", 134 to 135=> "0", 
    136 to 137=> "1", 138 to 139=> "0", 140 to 141=> "1", 142 to 143=> "0", 144 to 145=> "1", 146 to 147=> "0", 148 to 149=> "1", 
    150 to 151=> "0", 152 to 153=> "1", 154 to 155=> "0", 156 to 157=> "1", 158 to 159=> "0", 160 to 161=> "1", 162 to 163=> "0", 
    164 to 165=> "1", 166 to 167=> "0", 168 to 169=> "1", 170 to 171=> "0", 172 to 173=> "1", 174 to 175=> "0", 176 => "1", 
    177 to 179=> "0", 180 to 182=> "1", 183 => "0", 184 => "1", 185 to 187=> "0", 188 to 190=> "1", 191 => "0", 
    192 => "1", 193 to 195=> "0", 196 to 198=> "1", 199 => "0", 200 => "1", 201 to 203=> "0", 204 to 206=> "1", 
    207 => "0", 208 => "1", 209 to 211=> "0", 212 to 214=> "1", 215 => "0", 216 => "1", 217 to 219=> "0", 
    220 to 222=> "1", 223 => "0", 224 => "1", 225 to 227=> "0", 228 to 230=> "1", 231 => "0", 232 => "1", 
    233 to 235=> "0", 236 to 238=> "1", 239 to 243=> "0", 244 to 247=> "1", 248 to 251=> "0", 252 to 255=> "1" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity MatchEngine_1_0_sbkb is
    generic (
        DataWidth : INTEGER := 1;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of MatchEngine_1_0_sbkb is
    component MatchEngine_1_0_sbkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    MatchEngine_1_0_sbkb_rom_U :  component MatchEngine_1_0_sbkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


